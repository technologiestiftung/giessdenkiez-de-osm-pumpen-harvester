# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Check python code, build Dockerfile, run custom action

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest
      # TODO: [GDK-18] increase test coverage to around 75
      - name: Coverage with pytest
        run: |
          pytest --cov=harvester --cov-fail-under 65 --cov-report term-missing --cov-config=.coveragerc
  docker:
    needs: build
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - uses: actions/checkout@v4
      - name: docker build test
        run: |
          docker build --label version=${GITHUB_REF##*/}  --tag "${GITHUB_REPOSITORY}:${GITHUB_REF##*/}" .
      - name: docker run test
        run: |
          docker run -v /tmp:/tmp "${GITHUB_REPOSITORY}:${GITHUB_REF##*/}" /tmp/out.json
      - name: output assertion
        run: |
          FILE="/tmp/out.json"
          if [ -f $FILE ];then
            echo "$FILE exists"
          else
            echo "$FILE doesn't exist"
            exit 1
          fi
          FILE="/tmp/out.json.min.json"
          if [ -f $FILE ];then
            echo "$FILE exists"
          else
            echo "$FILE doesn't exist"
            exit 1
          fi
  collect_pumps:
    needs: docker
    runs-on: ubuntu-latest
    name: Collect pumps (test run of action)
    steps:
      # To use this repository's private action,
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v4
      - name: Pumps data generate step
        uses: ./ # Uses an action in the root directory
        id: pumps
        with:
          outfile-path: "out/pumps.geojson"
      # Use the output from the `pumps` step
      - name: File output
        run: echo "The file was written to ${{ steps.pumps.outputs.file }}"